--- Enter TestFunctionsBuiltin.main()        ... 
--- ======================================== ... 
--- 
--- Exercise abs() function ...
--- 
---   Absolute value of -10 is: 10
---   Absolute value of -3.141 is: 3.141
---   Absolute value of 1 + 2j is: 2.23606797749979
--- 
--- Exercise all() function ...
--- 
---   Testlist01: [True, True, True, True] ...
---   all(testlist01) --> True ...
---   Testlist02: [True, False, True] ...
---   all(testlist02) --> False ...
--- 
--- Exercise any() function ...
--- 
---   Testlist01: [False, False, False, False] ...
---   Testlist02: [False, True, True, False] ...
---   any(testlist01) --> False ...
---   any(testlist02) --> True ...
--- 
--- Exercise dict() function ...
--- 
---    city01: {'name': 'Baltimore', 'latitude': 39.299, 'longitude': -76.609, 'state': 'Maryland', 'country': 'USA'} ...
---    Access items in city01 ...
---    Name      --> Baltimore ...
---    State     --> Maryland ...
---    Country   --> USA ...
---    Latitude  -->   39.299 ...
---    Longitude -->  -76.609 ...
--- 
--- Exercise float() function ...
--- 
---    Integer to float: 3 --> 3.000 ...
---    Float to float: 3.14 --> 3.141 ...
---    String to float: 3.141 --> 3.141 ...
--- 
--- Exercise format() function ...
--- 
---    Integer format: 3
---    Integer format:     3
---    Floating point format: 3.14
---    Floating point format: 3.1416
---    Floating point format: 3.141593
---    Exponential format: 3.14e+00
---    String format: 3.1415926
--- 
---    Use of precision variable ...
--- 
---    Floating point format: 3.14159
---    Exponential format: 3.14159e+00
---    String format: 3.141
--- 
--- Exercise input() function ...
--- 
---    Enter your name:---    Hello, Austin
--- 
--- Exercise len() function ...
--- 
---   Testlist03: ['apple', 'banana', 'cherry', 'grape'] ...
---   len(testlist03) --> 4 ...
--- 
--- Exercise list() function ...
--- 
---    List01 (defined with constructor): ['apple', 40, True, 2.5, False] ...
--- 
--- Exercise max() and min() functions ...
--- 
---    List02: ['apple', 'banana', 'cherry', 'avacado'] ...
---    max(list02) --> cherry ...
---    min(list02) --> apple ...
---    List03: [0.0, 6.0, 12.0, -120.0, 13.0, 100.0] ...
---    max(list03) -->   100.00 ...
---    min(list03) -->  -120.00 ...
--- 
--- Exercise sorted() function ...
--- 
---    sorted(list02) --> ['apple', 'avacado', 'banana', 'cherry'] ...
---    sorted(list03) --> [-120.0, 0.0, 6.0, 12.0, 13.0, 100.0] ...
--- 
--- Exercise tuple() function ...
--- 
---    Tuple01: ('apple', 'banana', 'avacado')
---    Tuple02: ('cheese', 'bread', 'milk')
---    Concatenate: tuple01 + tuple02 --> ('apple', 'banana', 'avacado', 'cheese', 'bread', 'milk')
---    Tuple03: (1, 2, 3)
---    Tuple04: (4, 5, 6)
---    Concatenate: tuple03 + tuple04 --> (1, 2, 3, 4, 5, 6)
--- 
--- Exercise type() function ...
--- 
---    type(x01)     --> <class 'int'> ...
---    type(x02)     --> <class 'float'> ...
---    type(x03)     --> <class 'str'> ...
---    type(list01)  --> <class 'list'> ...
---    type(tuple01) --> <class 'tuple'> ...
--- ======================================== ... 
--- Leave TestFunctionsBuiltin.main()        ... 
