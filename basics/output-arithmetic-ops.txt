--- Enter TestArithmeticOperators.main()     ... 
--- ======================================== ... 
--- 
--- Define three types of numbers ... 
--- 
1
3.1315936
(1+2j)
--- 
--- Arithmetic with Integers Results ... 
--- 
--- x =  1, y =  3, z =  7  ... 
--- Addition: x + y -->  4 ... 
--- Subtraction: x - y --> -2 ... 
--- Multiplication: x * y -->  3 ... 
--- Division: x / y --> 0.33 ... 
--- Power: y**y --> 27 ... 
--- Power: y**z --> 2187 ... 
--- Power: z**y --> 343 ... 
--- Modulo: x % y -->  1 ... 
--- Modulo: z % y -->  1 ... 
--- 
--- Simulate Integer Division ... 
--- 
--- Integer Division: x // y --> 0.00 ... 
--- Integer Division: y // z --> 0.00 ... 
--- Integer Division: z // y --> 2.00 ... 
--- 
--- Floating-point Arithmetic ... 
--- 
--- x = 1.50, y = 3.60, z = 5.00  ... 
--- Addition: x + y --> 5.10 ... 
--- Subtraction: x - y --> -2.10 ... 
--- Multiplication: x * y --> 5.40 ... 
--- Division: x / y --> 0.42 ... 
--- Power: x**x --> 1.83712 ... 
--- Power: y**y --> 100.62 ... 
--- Power: z**z --> 3125.00 ... 
--- 
--- Simulate and catch divide-by-zero error condition ... 
--- 
--- x = 0.00, y = 3.60, z = 5.00  ... 
--- Division: y / x --> Error: divide by zero ... 
--- 
--- Simulate and catch numerical overflow error condition ... 
--- 
--- i =   0, f = 3.00e+00 
--- i =   1, f = 9.00e+00 
--- i =   2, f = 8.10e+01 
--- i =   3, f = 6.56e+03 
--- i =   4, f = 4.30e+07 
--- i =   5, f = 1.85e+15 
--- i =   6, f = 3.43e+30 
--- i =   7, f = 1.18e+61 
--- i =   8, f = 1.39e+122 
--- i =   9, f = 1.93e+244 
--- Numerical Overflow error ... 
--- 
--- Complex number arithmetic ... 
--- 
--- a: 1.00+3.00j
--- b: 1.00-2.00j
--- Addition: a + b --> 2.00+1.00j ... 
--- Subtraction: a - b --> 0.00+5.00j ... 
--- Multiplication: a * b --> 7.00+1.00j ... 
--- Division: a / b --> -1.00+1.00j ... 
--- ======================================== ... 
--- Leave TestArithmeticOperators.main()     ... 
